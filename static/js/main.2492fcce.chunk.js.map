{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","isImgError","isImdbError","onChange","useState","Math","random","toString","slice","id","touched","setTouched","hasError","hasImgError","hasImdbError","htmlFor","classNames","type","placeholder","event","onBlur","pattern","initialForm","NewMovie","onAdd","count","setCount","form","setForm","imageValidationError","setImageValidationError","imdbValidationError","setImdbValidationError","handleChange","target","length","match","validateInput","currentForm","isButtonDisabled","onSubmit","preventDefault","prevCount","disabled","App","moviesFromServer","setMovies","newMovie","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2492fcce.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  isImgError?: boolean,\n  isImdbError?: boolean,\n  onChange?: (newValue: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  isImgError = false,\n  isImdbError = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n  const hasImgError = !hasError && isImgError && touched;\n  const hasImdbError = !hasError && isImdbError && touched;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          name={name}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || hasImgError || hasImdbError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasImgError && (\n        <p className=\"help is-danger\">{`${label} doesn't match the imageURL patern`}</p>\n      )}\n\n      {hasImdbError && (\n        <p className=\"help is-danger\">{`${label} doesn't match the imdbURL pattern`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void,\n};\n\n// eslint-disable-next-line max-len\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nconst initialForm = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie:React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [form, setForm] = useState(initialForm);\n  const [imageValidationError, setImageValidationError] = useState(false);\n  const [imdbValidationError, setImdbValidationError] = useState(false);\n\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbId,\n    imdbUrl,\n  } = form;\n\n  const validateInput = (name: string, value: string) => {\n    switch (name) {\n      case 'imdbUrl':\n        if (value.length) {\n          setImdbValidationError(!value.match(pattern));\n        }\n\n        break;\n\n      case 'imgUrl':\n        if (value.length) {\n          setImageValidationError(!value.match(pattern));\n        }\n\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    if (name === 'imgUrl' || name === 'imdbUrl') {\n      validateInput(name, value);\n    }\n\n    setForm(currentForm => ({\n      ...currentForm,\n      [name]: value,\n    }));\n  };\n\n  const clearForm = () => {\n    setForm(initialForm);\n    setCount(prevCount => prevCount + 1);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event?.preventDefault();\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    clearForm();\n  };\n\n  const isButtonDisabled = !(\n    title\n    && imgUrl\n    && imdbId\n    && imdbUrl\n    && !imageValidationError\n    && !imdbValidationError);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        isImgError={imageValidationError}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        isImdbError={imdbValidationError}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={handleChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isButtonDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC<{}> = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addNewMovie = (newMovie: Movie) => {\n    setMovies(prevState => [...prevState, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}